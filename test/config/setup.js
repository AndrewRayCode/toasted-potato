const child = require('child_process');
const os = require('os');
const fs = require('fs');
const path = require('path');
const commandLineArgs = require('command-line-args');
const colors = require('colors/safe');
const executable = require('executable');
const prompt = require('prompt');

const { platform } = os;
const { execSync, exec } = child;
const username = os.userInfo().username;
const env = process.env.NODE_ENV;
const osPlatform = platform();
const defaultBlenderPathCheck = {
    darwin: '/Applications/blender.app/Contents/MacOS/blender',
};

const commandArgs = commandLineArgs([
    { name: 'blender-path', type: String },
    { name: 'addons-path', type: String },
    { name: 'watch', type: Boolean },
]);

function error(msg) {
    console.error(colors.red(`\n🚨  Error! 🚨`));
    console.error(msg);
    console.error(colors.red(`\nError generated by ${__filename}`));
    process.exit(1);
}
function setupDirectories() {
    const outputPath = path.resolve(__dirname, '..', 'exports');
    if (!fs.existsSync(outputPath)) {
        fs.mkdirSync(outputPath);
    }
    return outputPath;
}
function validateAndSetUpAddons(addonsPath, callback) {
    if (!addonsPath) {
        error(
            colors.red
                .bold(`Please provide the absolute path to the Blender addons directory, as in:
        yarn test -- --addons-path='/path/to/blender/addons/'`),
        );
    }
    const testDirName = 'io_three_test';
    const installTestDir = path.resolve(addonsPath, testDirName);
    if (fs.existsSync(installTestDir)) {
        callback();
    } else {
        const currentAddonPath = path.resolve(
            __dirname,
            '..',
            '..',
            'blender',
            'io_three_test',
        );
        const syminkCommand = `ln -s "${currentAddonPath}" "${installTestDir}"`;
        const description = colors.red
            .bold(`\n❗ This will symlink the exporter in this directory to your Blender directory:
${colors.cyan(installTestDir)}
Is this OK? Y/n`);
        prompt.start();
        prompt.get(
            {
                properties: {
                    confirm: {
                        description: description,
                    },
                },
            },
            function(err, result) {
                if (result.confirm === 'Y') {
                    console.log(
                        colors.green.bold(`\nExecuting:
    ${syminkCommand}`),
                    );
                    execSync(syminkCommand);
                    callback();
                } else {
                    error(
                        colors.red.bold(
                            'You did not give permission to symlink the test directory. Cannot continue!',
                        ),
                    );
                }
            },
        );
    }
}
function validateAndGetBlenderPath(blederPathArg) {
    let blenderPath;
    if (blederPathArg) {
        blenderPath = blederPathArg;
    } else if (osPlatform in defaultBlenderPathCheck) {
        blenderPath = defaultBlenderPathCheck[osPlatform];
    } else {
        error(
            colors.bold
                .red(`Congrats! You are the first user to run this project on the platform "${colors.cyan(
                osPlatform,
            )}"! Please make a pull request with the correct exectuable path of a default Blender install.
    Until then you run:
        yarn test -- --blender-path=/path/to/blender/executable --addons-directory=/path/to/blender/addons`),
        );
    }
    let foundAndExecutable = false;
    if (fs.existsSync(blenderPath)) {
        foundAndExecutable = executable.sync(blenderPath);
    }
    if (!foundAndExecutable) {
        error(
            colors.red.bold(
                `I looked for Blender the file at this path: "${colors.cyan(
                    blenderPath,
                )}" but it does not exist or is not executable.
    Please verify this file exists, or pass in the path to the Blender executable via:
        ${colors.cyan(
            'yarn test -- --blender-path=/path/to/blender/executable',
        )}`,
            ),
        );
    }
    return blenderPath;
}
module.exports = function(callback) {
    const outputPath = setupDirectories();
    validateAndSetUpAddons(commandArgs['addons-path'], () => {
        const blenderPath = validateAndGetBlenderPath(
            commandArgs['blender-path'],
        );
        callback(commandArgs, outputPath, blenderPath);
    });
};
